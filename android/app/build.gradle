def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

//腾讯bug管理插件
apply plugin: 'bugly'
apply from: 'tinker-support.gradle'


android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.hc.flutter_hotfix_notkt"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "20.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    
    signingConfigs {
        release {
            try {
                storeFile file("./keystore/hcc.jks")
                storePassword "hcc007"
                keyAlias "hcc"
                keyPassword "hcc007"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }

        debug {
            storeFile file("./keystore/debug.keystore")
        }
        
    }

    buildTypes {
        release {
            //   minifyEnabled true
            signingConfig signingConfigs.release
            //  proguardFiles getDefaultProguardFile('proguard-android.txt'), project.file('proguard-rules.pro')

            // 混淆开关
            minifyEnabled false
            // 是否zip对齐
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            // 是否打开debuggable开关
            debuggable false
            // 是否打开jniDebuggable开关
            jniDebuggable false
            // 混淆配置文件
            proguardFile 'proguard-rules.pro'
            //
//
            ndk {
                abiFilters 'armeabi-v7a' //, 'armeabi-v7a', 'x86_64', 'arm64-v8a', 'mips', 'mips64'
            }
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.release

            ndk {
                abiFilters 'armeabi' , 'armeabi-v7a', 'x86_64', 'arm64-v8a', 'mips', 'mips64'
            }
        }
    }

    dexOptions {
        jumboMode = true
    }
}

flutter {
    source '../..'
    
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'


    implementation "com.android.support:multidex:1.0.1" // 多dex配置
    //implementation 'com.tencent.bugly:crashreport_upgrade:1.3.4'// 远程仓库集成方式（推荐）
    //implementation("com.tencent.tinker:tinker-android-lib:1.9.1") { changing = true }

    implementation 'com.tencent.bugly:crashreport_upgrade:1.3.5'
    // 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）
    implementation 'com.tencent.tinker:tinker-android-lib:1.9.6'
    implementation 'com.tencent.bugly:nativecrashreport:latest.release' //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0

    
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'


}
